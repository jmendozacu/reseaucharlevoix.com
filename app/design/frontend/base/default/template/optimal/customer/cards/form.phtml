<form action="<?php echo $this->getUrl('customer/optimal/addPost') ?>" method="post" id="form-validate">
    <div class="fieldset">
        <input type="hidden" name="success_url" value="">
        <input type="hidden" name="error_url" value="">
        <h2 class="legend"><?php echo $this->__('Credit Card Information') ?></h2>
        <ul class="form-list">
            <li class="fields">
                <div class="customer-name">
                </div>
            </li>
            <li class="wide">
                <label for="cc_number" class="required"><em>*</em><?php echo $this->__('Credit Card Number') ?></label>
                <div class="input-box">
                    <input type="text" name="cc_number" id="cc_number" title="Credit Card Number" value="" class="input-text required-entry">
                </div>
            </li>
            <li class="fields">
                <div class="field">
                    <label for="cc_cid" class="required"><em>*</em><?php echo $this->__('CVV') ?></label>
                    <div class="input-box">
                        <input type="text" name="cc_cid" value="" title="cc_cid" class="input-text required-entry" id="cc_cid">
                    </div>
                </div>
                <div class="field">
                    <label for="cc_exp_month" class="required"><em>*</em><?php echo $this->__('Expiration Date Month') ?></label>
                    <select id="cc_exp_month" name="cc_exp_month" class="month validate-cc-exp required-entry">
                        <?php foreach ($this->getCcMonths() as $k=>$v): ?>
                            <option value="<?php echo $k?$k:'' ?>"><?php echo $v ?></option>
                        <?php endforeach ?>
                    </select>
                </div>
                <div class="field">
                    <label for="cc_exp_year" class="required"><em>*</em><?php echo $this->__('Expiration Date Year') ?></label>
                    <select id="cc_exp_year" name="cc_exp_year" class="year validate-cc-exp required-entry">
                        <?php foreach ($this->getCcYears() as $k=>$v): ?>
                            <option value="<?php echo $v ?>"><?php echo $v ?></option>
                        <?php endforeach ?>
                    </select>
                </div>
            </li>
        </ul>
    </div>
    <div class="buttons-set">
        <p class="required">* <?php echo $this->__('Required Fields') ?></p>
        <p class="back-link"><a href=""><small>Â« </small><?php echo $this->__('Back') ?></a></p>
        <button type="submit" title="Save Credit Card" class="button"><span><span><?php echo $this->__('Save Credit Card') ?></span></span></button>
    </div>
</form>

<script type="text/javascript">
    var CreditCard = {
        CARDS: {
            Visa: /^4[0-9]{12}(?:[0-9]{3})?$/,
            MasterCard: /^5[1-5][0-9]{14}$/,
            DinersClub: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,
            Amex: /^3[47][0-9]{13}$/,
            Discover: /^6(?:011|5[0-9]{2})[0-9]{12}$/
        },
        TEST_NUMBERS: $w('378282246310005 371449635398431 378734493671000 '+
            '30569309025904 38520000023237 6011111111111117 '+
            '6011000990139424 5555555555554444 5105105105105100 '+
            '4111111111111111 4012888888881881 4222222222222'
        ),

        // Validate that is a Luhn valid number
        // Validate that is one of the valid credit card types
        // Validate that is not a test number
        validate: function(number){
            return CreditCard.verifyLuhn10(number)
                && !!CreditCard.type(number)
                && !CreditCard.isTestNumber(number);
        },

        // The Luhn algorithm or Luhn formula, also known as the "modulus 10" or "mod 10" algorithm, is a simple
        // checksum formula used to validate a variety of identification numbers, such as credit card numbers,
        // IMEI numbers, National Provider Identifier numbers in US and Canadian Social Insurance Numbers.
        verifyLuhn10: function(number){
            return ($A(CreditCard.strip(number)).reverse().inject(0,function(a,n,index){
                return a + $A((parseInt(n) * [1,2][index%2]).toString())
                    .inject(0, function(b,o){ return b + parseInt(o) }) }) % 10 == 0);
        },

        // Check if is test number
        isTestNumber: function(number){
            return CreditCard.TEST_NUMBERS.include(CreditCard.strip(number));
        },

        // Remove spaces
        strip: function(number) {
            return number.gsub(/\s/,'');
        },

        // Check credit card types
        type: function(number) {
            for(var card in CreditCard.CARDS)
                if(CreditCard['is'+card](number)) return card;
        }
    };

    (function(){
        for(var card in CreditCard.CARDS)
            CreditCard['is'+card] = function(card, number){
                return CreditCard.CARDS[card].test(CreditCard.strip(number));
            }.curry(card);
    })();


    Event.observe('form-validate', 'submit', function (event) {
        var creditcard = $('credit_number').value;
        if (!CreditCard.validate(creditcard)) {
            Event.stop(event);
            $('credit_number').addClassName('validation-failed');
            alert('Your Credit Card is not valid');
        }
    });
</script>